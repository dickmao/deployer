local aws_env = [
  "AWS_DEFAULT_REGION=" + std.extVar("AWS_DEFAULT_REGION"),
  "GIT_USER=" + std.extVar("GIT_USER"),
  "GIT_PASSWORD=" + std.extVar("GIT_PASSWORD"),
  "SES_USER=" + std.extVar("SES_USER"),
  "SES_PASSWORD=" + std.extVar("SES_PASSWORD"),
  "GIT_BRANCH=" + std.extVar("GIT_BRANCH"),
];

local newScrapyd(repository, command, env) = {
  image: repository + "scrapyd-deploy:latest",
  mem_limit: "300m",
  ports: [ "6800:6800" ],
  command: command,
  environment: aws_env + env
};

local newMongo(repository, command, env) = {
  image: "mongo:3.4.13-jessie",
  mem_limit: "500m",
  ports: [ "27017:27017" ],
  command: command,
  environment: env,
};

local newRedis(repository, port, env) = {
  image: "redis",
  mem_limit: "300m",
  environment: env + ["SERVICE_" + port + "_NAME=_redis._tcp"],
  ports: [ port + ":" + port ],
  volumes: [ "redis:/data" ],
};

local newPlayApp(repository, env) = {
  # cannot figure out how to do an unprefixed image with sbt native packager
  image: "303634175659.dkr.ecr.us-east-2.amazonaws.com/play-app:" + std.extVar("GIT_BRANCH"),
  mem_limit: "512m",
  ports: [ "80:9000" ],
  environment: [ "REDIS_HOST=redis" ] + env,
};

local newPlayEmail(repository, env) = {
  # cannot figure out how to do an unprefixed image with sbt native packager
  image: "303634175659.dkr.ecr.us-east-2.amazonaws.com/success-function:" + std.extVar("GIT_BRANCH"),
  environment: [ "REDIS_HOST=redis" ] + aws_env + env,
};

local newCoreNlp(repository, env) = {
  image: repository + "corenlp:3.8.0",
  mem_reservation: "2g",
  ports: [ "9005:9005" ],
  environment: [ "SERVICE_9005_NAME=_corenlp._tcp" ] + env,
};

local composeUp(repository) = {
  aws_env:: aws_env,
  version: "2",
  services: {
    base_service:: {
    },
    scrapyd_volume_mounted_service:: self["base_service"] + {
      volumes: [ "scrapyd:/var/lib/scrapyd" ],
    },
    mongo_volume_mounted_service:: self["base_service"] + {
      volumes: [ "mongo:/var/lib/mongodb" ],
    },
    "redis": newRedis(repository, "6379", []),
    mongo: self["mongo_volume_mounted_service"] + newMongo(repository, [ "mongod" ], []),
    "redis-populate": self["base_service"] + {
      image: repository + "redis-populate:latest",
      mem_limit: "200m",
      command: ["sh", "-c", "/wait-for-it.sh -t 500 redis:6379 -- sh -c '( getent aliases redis || getent hosts redis || ( sleep 60 && getent hosts redis ) ) && cat ./redin.tmp | redis-cli -h redis --pipe --pipe-timeout 100'"],
    },
    "redis-depopulate": self["base_service"] + {
      image: repository + "redis-populate:latest",
      mem_limit: "200m",
      command: ["sh", "-c", "/wait-for-it.sh -t 500 redis:6379 -- sh -c './purge-old.sh -h redis'"],
    },
    "ny-frontend": self["base_service"] + newPlayApp(repository, [ "MONGO_HOST=mongo" ]),
    "ny-email": self["base_service"] + newPlayEmail(repository, [ "MONGO_HOST=mongo" ]),
    "corenlp": self["base_service"] + newCoreNlp(repository, []),
    "scrapyd": self["scrapyd_volume_mounted_service"] + newScrapyd(repository, [ "scrapyd" ], []),
    "scrapyd-seed": self["scrapyd_volume_mounted_service"] + {
      mem_limit: "100m",
      image: repository + "scrapyd-seed:latest",
      environment: aws_env
    },
    "scrapyd-deploy": self["base_service"] + {
      image: repository + "scrapyd-deploy:latest",
      mem_limit: "100m",
      command: "sh -c 'while ! curl -s http://scrapyd:6800/daemonstatus.json | grep -qw ok ; do echo Waiting daemonstatus=ok && sleep 10 ; done ; while scrapyd-deploy aws 2>&1 | grep -i temporarily ; do sleep 10 ; done '",
    },
    "scrapyd-crawl": self["scrapyd_volume_mounted_service"] + {
      image: repository + "scrapyd-deploy:latest",
      mem_limit: "100m",
      command: "sh -c 'while ! curl -s http://scrapyd:6800/daemonstatus.json | grep -qw ok ; do echo Waiting daemonstatus=ok && sleep 10 ; done ; cron -f'",
    },
    "dedupe-on-demand": self["scrapyd_volume_mounted_service"] + {
      image: repository + "dedupe:latest",
      mem_reservation: "512m",
      command: "sh -c './wait-for-it.sh -t 500 corenlp:9005 -- ./wait-for-it.sh -t 500 redis:6379 -- ./dedupe-on-demand.sh '",
      environment: aws_env
    },
  },
  volumes: { "scrapyd": null,
             "redis": null,
             "mongo": null },
};

{
  aws_env:: aws_env,
  newScrapyd:: newScrapyd,
  newRedis:: newRedis,
  newMongo:: newMongo,
  composeUp:: composeUp,
  newPlayEmail:: newPlayEmail,
  newPlayApp:: newPlayApp,
  newCoreNlp:: newCoreNlp,
}
