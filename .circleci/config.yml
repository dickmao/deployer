version: 2
jobs:
  build-deployer-image:
    docker:
      - image: 303634175659.dkr.ecr.us-east-2.amazonaws.com/circleci:patient0
        user:
          root # circleci cannot seem to get /var/run/docker.sock
        aws_auth:
          aws_access_key_id: $AWS_ACCESS_KEY_ID
          aws_secret_access_key: $AWS_SECRET_ACCESS_KEY
    steps:
      - checkout

      - setup_remote_docker:
          docker_layer_caching: false

      - run: |
          set -x
          eval `aws ecr get-login --no-include-email --region $AWS_REGION`
          docker build --build-arg aws_region=${AWS_REGION} -t circleci:deployer .circleci/images
          docker tag circleci:deployer 303634175659.dkr.ecr.us-east-2.amazonaws.com/circleci:deployer
          docker push 303634175659.dkr.ecr.us-east-2.amazonaws.com/circleci:deployer

  build-ecscli:
    docker:
      - image: circleci/golang:1.9.2
    steps:
      - run: |
          set -x
          # Thanks @bobziuchkovski
          git config --global url."https://${GIT_PASSWORD}:x-oauth-basic@github.com/".insteadOf "https://github.com/"
          mkdir -p /go/src/github.com/aws
          (cd /go/src/github.com/aws ; git clone -b my-branch https://github.com/dickmao/amazon-ecs-cli.git)
          # shlomi noach, code.openark.org
          (cd /go/src/github.com/aws/amazon-ecs-cli ; go get ./... && make)
      - save_cache:
          key: ecscli-{{ checksum "/go/src/github.com/aws/amazon-ecs-cli/.git/index" }}
          paths: 
            - /go/src/github.com/aws/amazon-ecs-cli

  ecs-up:
    docker:
      - image: 303634175659.dkr.ecr.us-east-2.amazonaws.com/circleci:deployer
        aws_auth:
          aws_access_key_id: $AWS_ACCESS_KEY_ID
          aws_secret_access_key: $AWS_SECRET_ACCESS_KEY
    steps:
      - checkout
      - restore_cache:
          keys: ecscli
      - run: |
          set -x
          ./ecs-up.sh
      - persist_to_workspace:
          root: ecs-state
          paths:
            - "*"

  ecs-compose-up-except-dedupe:
    docker:
      - image: 303634175659.dkr.ecr.us-east-2.amazonaws.com/circleci:deployer
        aws_auth:
          aws_access_key_id: $AWS_ACCESS_KEY_ID
          aws_secret_access_key: $AWS_SECRET_ACCESS_KEY
    steps:
      - checkout
      - restore_cache:
          keys: ecscli
      - attach_workspace:
          at: ecs-state
      - run: |
          set -x
          ./ecs-compose-up.sh -x dedupe
      - persist_to_workspace:
          root: ecs-state
          paths:
            - "*"

  ecs-compose-up-dedupe:
    docker:
      - image: 303634175659.dkr.ecr.us-east-2.amazonaws.com/circleci:deployer
    steps:
      - checkout
      - restore_cache:
          keys: ecscli
      - attach_workspace:
          at: ecs-state
      - run: |
          set -x
          source ./bash_aliases.sh
          # I need /var/lib/scrapyd to be made by ecs-compose-up-except-dedupe
          # I can now touch digest there so that dedupe doesn't go after any existing Data
          for m in 0 1 ; do ssh-ecs $m sudo mkdir -p /efs/var/lib/scrapyd/items/tutorial/newyork \&\& sudo touch /efs/var/lib/scrapyd/items/tutorial/newyork/digest ; done
          ./ecs-compose-up.sh -s dedupe

  login-node:
    docker:
      - image: 303634175659.dkr.ecr.us-east-2.amazonaws.com/circleci:deployer
    steps:
      - checkout
      - restore_cache:
          keys: ecscli
      - attach_workspace:
          at: ecs-state
      - run: |
          set -x
          source ./bash_aliases.sh

  spider-newyork:
    docker:
      - image: 303634175659.dkr.ecr.us-east-2.amazonaws.com/circleci:deployer
    steps:
      - checkout
      - attach_workspace:
          at: ecs-state
      - run: |
          set -x
          source ./bash_aliases.sh
          # i believe i need sleep for the load balancer to get settled with the CNAME
          # Later, no.  Still happens with sleep 60.
          docke-ecs scrapyd-crawl "set -x \; ./wait-for-it.sh -t 500 scrapyd:6800 -- sleep 0 \; scrapyd-client -t http://scrapyd:6800 schedule -p tutorial newyork \; if [ $? == 137 ] \; then scrapyd-client -t http://scrapyd:6800 schedule -p tutorial newyork \; fi"
  
  spider-listingsproject: 
    docker:
      - image: 303634175659.dkr.ecr.us-east-2.amazonaws.com/circleci:deployer
    steps:
      - checkout
      - attach_workspace:
          at: ecs-state
      - run: |
          set -x
          source ./bash_aliases.sh
          docke-ecs scrapyd-crawl "./wait-for-it.sh -t 500 scrapyd:6800 -- sleep 0 \; scrapyd-client -t http://scrapyd:6800 schedule -p tutorial listingsproject"

  wait-for-digest:
    docker:
      - image: 303634175659.dkr.ecr.us-east-2.amazonaws.com/circleci:deployer
    steps:
      - checkout
      - attach_workspace:
          at: ecs-state
      - run: |
          set -x
          source ./bash_aliases.sh
          inprog=0
          log=$(ssh-ecs 0 date -r /efs/var/lib/scrapyd/logs/tutorial/newyork +%s)
          while [ $inprog -lt 180 ] && ! ssh-ecs 0 find -L /efs/var/lib/scrapyd/items/tutorial/newyork/digest -newermt @$log | grep -q digest ; do sleep 30 ; let inprog=inprog+1 ; echo $inprog; done
          echo Found digest later than $log
          ssh-ecs 0 ls -ldc /efs/var/lib/scrapyd/items/tutorial/newyork/digest

  success-function:
    docker:
      - image: 303634175659.dkr.ecr.us-east-2.amazonaws.com/circleci:deployer
    steps:
      - checkout
      - attach_workspace:
          at: ecs-state
      - run: |
          set -x
          source ./bash_aliases.sh
          docke-ecs play-email bin/success-function

  ecs-compose-down:
    docker:
      - image: 303634175659.dkr.ecr.us-east-2.amazonaws.com/circleci:deployer
        aws_auth:
          aws_access_key_id: $AWS_ACCESS_KEY_ID
          aws_secret_access_key: $AWS_SECRET_ACCESS_KEY
    steps:
      - checkout
      - restore_cache:
          keys: ecscli
      - attach_workspace:
          at: ecs-state
      - run: |
          set -x
          ./ecs-compose-down.sh
      - persist_to_workspace:
          root: ecs-state
          paths:
            - "*"

  ecs-down:
    docker:
      - image: 303634175659.dkr.ecr.us-east-2.amazonaws.com/circleci:deployer
        aws_auth:
          aws_access_key_id: $AWS_ACCESS_KEY_ID
          aws_secret_access_key: $AWS_SECRET_ACCESS_KEY
    steps:
      - checkout
      - attach_workspace:
          at: ecs-state
      - run: |
          set -x
          ./ecs-down.sh
      - persist_to_workspace:
          root: ecs-state
          paths:
            - "*"

workflows:
  version: 2
  commit:
    jobs:
      - build-deployer-image
      - build-ecscli
      - ecs-up:
          requires:
            - build-deployer-image
            - build-ecscli
      - ecs-compose-up-except-dedupe:
          requires:
            - ecs-up
      - login-node:
          requires:
            - ecs-compose-up-except-dedupe
      - ecs-compose-up-dedupe:
          requires:
            - ecs-compose-up-except-dedupe
      - spider-newyork:
          requires:
            - ecs-compose-up-except-dedupe
      - spider-listingsproject:
          requires:
            - ecs-compose-up-except-dedupe
      - wait-for-digest:
          requires:
            - spider-newyork
            - spider-listingsproject
            - ecs-compose-up-dedupe
      - ecs-compose-down:
          requires:
            - wait-for-digest
      - ecs-down:
          requires:
            - ecs-compose-down

  # sepp2k no way for array to contain anchor steps and additional steps
  scheduled-workflow:
    triggers:
      - schedule:
          cron: "0 15 * * *"
          filters:
            branches:
              only: master
    jobs:
      - build-deployer-image
      - build-ecscli
      - ecs-up:
          requires:
            - build-deployer-image
            - build-ecscli
      - ecs-compose-up-except-dedupe:
          requires:
            - ecs-up
      - login-node:
          requires:
            - ecs-compose-up-except-dedupe
      - ecs-compose-up-dedupe:
          requires:
            - ecs-compose-up-except-dedupe
      - spider-newyork:
          requires:
            - login-node
            - ecs-compose-up-dedupe
      - spider-listingsproject:
          requires:
            - login-node
            - ecs-compose-up-dedupe
      - wait-for-digest:
          requires:
            - spider-newyork
            - spider-listingsproject
      - success-function:
          requires:
            - wait-for-digest
      - ecs-compose-down:
          requires:
            - success-function
      - ecs-down:
          requires:
            - ecs-compose-down
