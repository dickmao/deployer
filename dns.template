{
    "AWSTemplateFormatVersion" : "2010-09-09",
    "Description" : "ECS Environment with Service Discovery",
    "Parameters": {
        "PublicSubnet1CIDR": {
            "AllowedPattern": "^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\\/(1[6-9]|2[0-8]))$",
            "Default": "10.0.128.0/20",
            "Type": "String",
            "ConstraintDescription": "CIDR block parameter must be in the form x.x.x.x/16-28",
            "Description": "CIDR Block for the public DMZ subnet 1 located in Availability Zone 1"
        },
        "PublicSubnet2CIDR": {
            "AllowedPattern": "^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\\/(1[6-9]|2[0-8]))$",
            "Default": "10.0.144.0/20",
            "Type": "String",
            "ConstraintDescription": "CIDR block parameter must be in the form x.x.x.x/16-28",
            "Description": "CIDR Block for the public DMZ subnet 2 located in Availability Zone 2"
        },
        "PublicSubnet3CIDR": {
            "AllowedPattern": "^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\\/(1[6-9]|2[0-8]))$",
            "Default": "10.0.160.0/20",
            "Type": "String",
            "ConstraintDescription": "CIDR block parameter must be in the form x.x.x.x/16-28",
            "Description": "CIDR Block for the public DMZ subnet 3 located in Availability Zone 3"
        },
        "PrivateSubnet1CIDR": {
            "AllowedPattern": "^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\\/(1[6-9]|2[0-8]))$",
            "Default": "10.0.0.0/19",
            "Type": "String",
            "ConstraintDescription": "CIDR block parameter must be in the form x.x.x.x/16-28",
            "Description": "CIDR block for private subnet 1 located in Availability Zone 1."
        },
        "PrivateSubnet2CIDR": {
            "AllowedPattern": "^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\\/(1[6-9]|2[0-8]))$",
            "Default": "10.0.32.0/19",
            "Type": "String",
            "ConstraintDescription": "CIDR block parameter must be in the form x.x.x.x/16-28",
            "Description": "CIDR block for private subnet 2 located in Availability Zone 2."
        },
        "PrivateSubnet3CIDR": {
            "AllowedPattern": "^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\\/(1[6-9]|2[0-8]))$",
            "Default": "10.0.64.0/19",
            "Type": "String",
            "ConstraintDescription": "CIDR block parameter must be in the form x.x.x.x/16-28",
            "Description": "CIDR block for private subnet 3 located in Availability Zone 3."
        },
        "VPCCIDR": {
            "AllowedPattern": "^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\\/(1[6-9]|2[0-8]))$",
            "Default": "10.0.0.0/16",
            "Type": "String",
            "ConstraintDescription": "CIDR block parameter must be in the form x.x.x.x/16-28",
            "Description": "CIDR Block for the VPC"
        },
        "AvailabilityZones": {
            "Type": "List<AWS::EC2::AvailabilityZone::Name>",
            "Description": "List of Availability Zones to use for the subnets in the VPC. Note: The logical order is preserved. 1 or 2 AZs are used for this deployment.",
            "Default": "us-east-2c"
        },
        "NumberOfAZs": {
            "AllowedValues": [ "1", "2" ],
            "Type": "String",
            "Default": "1"
        },
        "ClusterReplicaSetCount": {
            "Description": "Number of Replica Set Members. Choose 1 or 3",
            "Type": "String",
            "Default": "1",
            "AllowedValues": [
                "1",
                "3"
            ]
        },
        "MongoDBVersion": {
            "Description": "MongoDB version",
            "Type": "String",
            "Default": "3.4",
            "AllowedValues": [
                "3.4",
                "3.2"
            ]
        },
        "MongoDBAdminUsername": {
            "Default": "admin",
            "NoEcho": "true",
            "Description": "MongoDB admin account username",
            "Type": "String",
            "MinLength": "1",
            "MaxLength": "16",
            "AllowedPattern": "[a-zA-Z][a-zA-Z0-9]*",
            "ConstraintDescription": "must begin with a letter and contain only alphanumeric characters."
        },
        "MongoDBAdminPassword": {
            "AllowedPattern": "([A-Za-z0-9_@-]{8,32})",
            "ConstraintDescription": "Input your MongoDB database password, Min 8, Maximum of 32 characters. . Allowed characters are: [A-Za-z0-9_@-]",
            "Description": "Enter your MongoDB Database Password, Min 8, maximum of 32 characters.",
            "NoEcho": "true",
            "Type": "String"
        },
        "ReplicaShardIndex": {
            "Description": "Shard Index of this replica set",
            "Type": "String",
            "Default": "0"
        },
        "QSS3BucketName": {
            "AllowedPattern": "^[0-9a-zA-Z]+([0-9a-zA-Z-]*[0-9a-zA-Z])*$",
            "Default": "quickstart-reference",
            "Type": "String",
            "ConstraintDescription": "Quick Start bucket name can include numbers, lowercase letters, uppercase letters, and hyphens (-). It cannot start or end with a hyphen (-).",
            "Description": "S3 bucket name for the Quick Start assets. Quick Start bucket name can include numbers, lowercase letters, uppercase letters, and hyphens (-). It cannot start or end with a hyphen (-)."
        },
        "QSS3KeyPrefix": {
            "AllowedPattern": "^[0-9a-zA-Z-/]*$",
            "Default": "mongodb/latest/",
            "Type": "String",
            "ConstraintDescription": "Quick Start key prefix can include numbers, lowercase letters, uppercase letters, hyphens (-), and forward slash (/).",
            "Description": "S3 key prefix for the Quick Start assets. Quick Start key prefix can include numbers, lowercase letters, uppercase letters, hyphens (-), and forward slash (/). It cannot start or end with a hyphen (-)."
        },
        "EcsAmiId": {
          "Type": "String",
          "Description": "ECS EC2 AMI id",
          "Default": ""
        },
        "EcsInstanceType": {
          "Type": "String",
          "Description": "ECS EC2 instance type",
          "Default": "t2.micro",
          "AllowedValues": [
            "t2.nano",
            "t2.micro",
            "t2.small",
            "t2.medium",
            "t2.large",
            "m3.medium",
            "m3.large",
            "m3.xlarge",
            "m3.2xlarge",
            "m4.large",
            "m4.xlarge",
            "m4.2xlarge",
            "m4.4xlarge",
            "m4.10xlarge",
            "c4.large",
            "c4.xlarge",
            "c4.2xlarge",
            "c4.4xlarge",
            "c4.8xlarge",
            "c3.large",
            "c3.xlarge",
            "c3.2xlarge",
            "c3.4xlarge",
            "c3.8xlarge",
            "p2.xlarge",
            "p2.8xlarge",
            "p2.16xlarge",
            "g2.2xlarge",
            "g2.16xlarge",
            "x1.16xlarge",
            "x1.32xlarge",
            "r3.large",
            "r3.xlarge",
            "r3.2xlarge",
            "r3.4xlarge",
            "r3.8xlarge",
            "r4.large",
            "r4.xlarge",
            "r4.2xlarge",
            "r4.4xlarge",
            "r4.8xlarge",
            "r4.16xlarge",
            "i2.xlarge",
            "i2.2xlarge",
            "i2.4xlarge",
            "i2.8xlarge",
            "g2.2xlarge",
            "g2.8xlarge",
            "d2.xlarge",
            "d2.2xlarge",
            "d2.4xlarge",
            "d2.8xlarge"
          ],
          "ConstraintDescription": "must be a valid EC2 instance type."
        },
        "KeyName": {
          "Type": "AWS::EC2::KeyPair::KeyName",
          "Description": "Optional - Name of an existing EC2 KeyPair to enable SSH access to the ECS instances",
          "Default": ""
        },
        "AsgMaxSize": {
          "Type": "Number",
          "Description": "Maximum size and initial Desired Capacity of ECS Auto Scaling Group",
          "Default": "1"
        },
        "EcsCluster" : {
          "Type" : "String",
          "Description" : "ECS Cluster Name",
          "Default" : "default"
        },
        "VolumeName" : {
          "Description" : "The name to be used for the EFS volume",
          "Type": "String",
          "MinLength": "1",
          "Default": "efs"
        },
        "VolumeSize": {
            "Type": "String",
            "Description": "EBS Volume Size (data) to be attached to node in GBs",
            "Default": "400"
        },
        "VolumeType": {
            "Type": "String",
            "Description": "EBS Volume Type (data) to be attached to node in GBs [io1,gp2]",
            "Default": "gp2",
            "AllowedValues": [
                "gp2",
                "io1"
            ]
        },
        "MountPoint" : {
          "Description" : "The Linux mount point for the EFS volume",
          "Type": "String",
          "MinLength": "1",
          "Default": "efs"
        },
        "ScrapydHostpath" : {
          "Description" : "Efs path to bind mount in docker containers",
          "Type": "String",
          "MinLength": "1",
          "Default": "var/lib/scrapyd"
        },
        "RedisHostpath" : {
          "Description" : "Efs path to bind mount in docker containers",
          "Type": "String",
          "MinLength": "1",
          "Default": "var/lib/redis"
        },
        "spotBidPrice": {
            "Default": 0.85, 
            "Description": "Spot Instance bid price", 
            "Type": "String"
        }
    },

    "Conditions": {
        "CreateThreeReplicaSet": {
            "Fn::Equals": [
                {
                    "Ref": "ClusterReplicaSetCount"
                },
                "3"
            ]
        }
    },

    "Mappings" : {
        "AWSAMIRegionMap": {
            "AMI": {
                "AMZNLINUX": "amzn-ami-hvm-2017.09.1.20180115-x86_64-gp2"
            },
            "ap-northeast-1": {
                "AMZNLINUX": "ami-ceafcba8"
            },
            "ap-northeast-2": {
                "AMZNLINUX": "ami-863090e8"
            },
            "ap-south-1": {
                "AMZNLINUX": "ami-531a4c3c"
            },
            "ap-southeast-1": {
                "AMZNLINUX": "ami-68097514"
            },
            "ap-southeast-2": {
                "AMZNLINUX": "ami-942dd1f6"
            },
            "ca-central-1": {
                "AMZNLINUX": "ami-a954d1cd"
            },
            "eu-central-1": {
                "AMZNLINUX": "ami-5652ce39"
            },
            "eu-west-1": {
                "AMZNLINUX": "ami-d834aba1"
            },
            "eu-west-2": {
                "AMZNLINUX": "ami-403e2524"
            },
            "sa-east-1": {
                "AMZNLINUX": "ami-84175ae8"
            },
            "us-east-1": {
                "AMZNLINUX": "ami-97785bed"
            },
            "us-east-2": {
                "AMZNLINUX": "ami-f63b1193"
            },
            "us-west-1": {
                "AMZNLINUX": "ami-824c4ee2"
            },
            "us-west-2": {
                "AMZNLINUX": "ami-f2d3638a"
            }
        },
        "VPCLayout" : {
            "VPC" : { "CIDR" : "10.5.0.0/16" },
            "PublicSubnet1Config" : { "CIDR" : "10.5.10.0/24" },
            "PublicSubnet2Config" : { "CIDR" : "10.5.15.0/24" }
        },
        "RegionalConfigs": {
          "us-east-1": {
            "ELBAccountId": "127311923021"
          },
          "us-west-1": {
            "ELBAccountId": "027434742980"
          },
          "us-west-2": {
            "ELBAccountId": "797873946194"
          },
          "us-east-2": {
            "ELBAccountId": "033677994240"
          }
        }
    },
    "Resources" : {

        "PrimaryReplicaNode0WaitForNodeInstallWaitHandle": {
            "Type": "AWS::CloudFormation::WaitConditionHandle",
            "Properties": {}
        },
        "PrimaryReplicaNode0": {
            "DependsOn": "PrimaryReplicaNode0WaitForNodeInstallWaitHandle",
            "Type": "AWS::CloudFormation::Stack",
            "Properties": {
                "TemplateURL": "https://${QSS3BucketName}.s3.amazonaws.com/${QSS3KeyPrefix}templates/mongodb-node.template",
                "Parameters": {
                    "QSS3BucketName": {
                        "Ref": "QSS3BucketName"
                    },
                    "QSS3KeyPrefix": {
                        "Ref": "QSS3KeyPrefix"
                    },
                    "ClusterReplicaSetCount": {
                        "Ref": "ClusterReplicaSetCount"
                    },
                    "Iops": {
                        "Ref": "Iops"
                    },
                    "KeyName": {
                        "Ref": "KeyName"
                    },
                    "MongoDBVersion": {
                        "Ref": "MongoDBVersion"
                    },
                    "MongoDBAdminUsername": {
                        "Ref": "MongoDBAdminUsername"
                    },
                    "MongoDBAdminPassword": {
                        "Ref": "MongoDBAdminPassword"
                    },
                    "NodeSubnet": {
                        "Ref": "PublicSubnet1"
                    },
                    "MongoDBServerSecurityGroupID": {
                        "Ref": "MongoDBServerSecurityGroup"
                    },
                    "MongoDBServersSecurityGroupID": {
                        "Ref": "MongoDBServersSecurityGroup"
                    },
                    "MongoDBNodeIAMProfileID": {
                        "Ref": "MongoDBNodeIAMProfile"
                    },
                    "VPC": {
                        "Ref": "VPC"
                    },
                    "VolumeSize": {
                        "Ref": "VolumeSize"
                    },
                    "VolumeType": {
                        "Ref": "VolumeType"
                    },
                    "StackName": {
                        "Ref": "AWS::StackName"
                    },
                    "ImageId": {
                        "Fn::FindInMap": [
                            "AWSAMIRegionMap",
                            {
                                "Ref": "AWS::Region"
                            },
                            "AMZNLINUX"
                        ]
                    },
                    "ReplicaNodeNameTag": "PrimaryReplicaNode0",
                    "NodeReplicaSetIndex": "0",
                    "ReplicaShardIndex": {
                        "Ref": "ReplicaShardIndex"
                    },
                    "ReplicaNodeWaitForNodeInstallWaitHandle": {
                        "Ref": "PrimaryReplicaNode0WaitForNodeInstallWaitHandle"
                    }
                }
            }
        },
        "PrimaryReplicaNode0WaitForNodeInstall": {
            "Type": "AWS::CloudFormation::WaitCondition",
            "DependsOn": "PrimaryReplicaNode0",
            "Properties": {
                "Handle": {
                    "Ref": "PrimaryReplicaNode0WaitForNodeInstallWaitHandle"
                },
                "Timeout": "3600"
            }
        },

        "SecondaryReplicaNode0WaitForNodeInstallWaitHandle": {
            "Type": "AWS::CloudFormation::WaitConditionHandle",
            "Properties": {},
            "Condition": "CreateThreeReplicaSet"
        },
        "SecondaryReplicaNode0": {
            "DependsOn": "SecondaryReplicaNode0WaitForNodeInstallWaitHandle",
            "Condition": "CreateThreeReplicaSet",
            "Type": "AWS::CloudFormation::Stack",
            "Properties": {
                "TemplateURL": "https://${QSS3BucketName}.s3.amazonaws.com/${QSS3KeyPrefix}templates/mongodb-node.template",
                "Parameters": {
                    "QSS3BucketName": {
                        "Ref": "QSS3BucketName"
                    },
                    "QSS3KeyPrefix": {
                        "Ref": "QSS3KeyPrefix"
                    },
                    "ClusterReplicaSetCount": {
                        "Ref": "ClusterReplicaSetCount"
                    },
                    "Iops": {
                        "Ref": "Iops"
                    },
                    "KeyName": {
                        "Ref": "KeyName"
                    },
                    "MongoDBVersion": {
                        "Ref": "MongoDBVersion"
                    },
                    "MongoDBAdminUsername": {
                        "Ref": "MongoDBAdminUsername"
                    },
                    "MongoDBAdminPassword": {
                        "Ref": "MongoDBAdminPassword"
                    },
                    "NodeSubnet": {
                        "Ref": "PublicSubnet2"
                    },
                    "MongoDBServerSecurityGroupID": {
                        "Ref": "MongoDBServerSecurityGroup"
                    },
                    "MongoDBServersSecurityGroupID": {
                        "Ref": "MongoDBServersSecurityGroup"
                    },
                    "MongoDBNodeIAMProfileID": {
                        "Ref": "MongoDBNodeIAMProfile"
                    },
                    "VPC": {
                        "Ref": "VPC"
                    },
                    "VolumeSize": {
                        "Ref": "VolumeSize"
                    },
                    "VolumeType": {
                        "Ref": "VolumeType"
                    },
                    "StackName": {
                        "Ref": "AWS::StackName"
                    },
                    "ImageId": {
                        "Fn::FindInMap": [
                            "AWSAMIRegionMap",
                            {
                                "Ref": "AWS::Region"
                            },
                            "AMZNLINUX"
                        ]
                    },
                    "ReplicaNodeNameTag": "SecondaryReplicaNode0",
                    "NodeReplicaSetIndex": "1",
                    "ReplicaShardIndex": {
                        "Ref": "ReplicaShardIndex"
                    },
                    "ReplicaNodeWaitForNodeInstallWaitHandle": {
                        "Ref": "SecondaryReplicaNode0WaitForNodeInstallWaitHandle"
                    }
                }
            }
        },
        "SecondaryReplicaNode0WaitForNodeInstall": {
            "Type": "AWS::CloudFormation::WaitCondition",
            "Condition": "CreateThreeReplicaSet",
            "DependsOn": "SecondaryReplicaNode0",
            "Properties": {
                "Handle": {
                    "Ref": "SecondaryReplicaNode0WaitForNodeInstallWaitHandle"
                },
                "Timeout": "3600"
            }
        },
        "SecondaryReplicaNode1WaitForNodeInstallWaitHandle": {
            "Type": "AWS::CloudFormation::WaitConditionHandle",
            "Properties": {},
            "Condition": "CreateThreeReplicaSet"
        },
        "SecondaryReplicaNode1": {
            "DependsOn": "SecondaryReplicaNode1WaitForNodeInstallWaitHandle",
            "Condition": "CreateThreeReplicaSet",
            "Type": "AWS::CloudFormation::Stack",
            "Properties": {
                "TemplateURL": "https://${QSS3BucketName}.s3.amazonaws.com/${QSS3KeyPrefix}templates/mongodb-node.template",
                "Parameters": {
                    "QSS3BucketName": {
                        "Ref": "QSS3BucketName"
                    },
                    "QSS3KeyPrefix": {
                        "Ref": "QSS3KeyPrefix"
                    },
                    "ClusterReplicaSetCount": {
                        "Ref": "ClusterReplicaSetCount"
                    },
                    "Iops": {
                        "Ref": "Iops"
                    },
                    "KeyName": {
                        "Ref": "KeyName"
                    },
                    "MongoDBVersion": {
                        "Ref": "MongoDBVersion"
                    },
                    "MongoDBAdminUsername": {
                        "Ref": "MongoDBAdminUsername"
                    },
                    "MongoDBAdminPassword": {
                        "Ref": "MongoDBAdminPassword"
                    },
                    "NodeInstanceType": {
                        "Ref": "NodeInstanceType"
                    },
                    "NodeSubnet": {
                        "Ref": "PublicSubnet2"
                    },
                    "MongoDBServerSecurityGroupID": {
                        "Ref": "MongoDBServerSecurityGroup"
                    },
                    "MongoDBServersSecurityGroupID": {
                        "Ref": "MongoDBServersSecurityGroup"
                    },
                    "MongoDBNodeIAMProfileID": {
                        "Ref": "MongoDBNodeIAMProfile"
                    },
                    "VPC": {
                        "Ref": "VPC"
                    },
                    "VolumeSize": {
                        "Ref": "VolumeSize"
                    },
                    "VolumeType": {
                        "Ref": "VolumeType"
                    },
                    "StackName": {
                        "Ref": "AWS::StackName"
                    },
                    "ImageId": {
                        "Fn::FindInMap": [
                            "AWSAMIRegionMap",
                            {
                                "Ref": "AWS::Region"
                            },
                            "AMZNLINUX"
                        ]
                    },
                    "ReplicaNodeNameTag": "SecondaryReplicaNode1",
                    "NodeReplicaSetIndex": "2",
                    "ReplicaShardIndex": {
                        "Ref": "ReplicaShardIndex"
                    },
                    "ReplicaNodeWaitForNodeInstallWaitHandle": {
                        "Ref": "SecondaryReplicaNode1WaitForNodeInstallWaitHandle"
                    }
                }
            }
        },
        "SecondaryReplicaNode1WaitForNodeInstall": {
            "Type": "AWS::CloudFormation::WaitCondition",
            "Condition": "CreateThreeReplicaSet",
            "DependsOn": "SecondaryReplicaNode1",
            "Properties": {
                "Handle": {
                    "Ref": "SecondaryReplicaNode1WaitForNodeInstallWaitHandle"
                },
                "Timeout": "3600"
            }
        },


        "MongoDBServerSecurityGroup": {
            "Type": "AWS::EC2::SecurityGroup",
            "Properties": {
                "VpcId": {
                    "Ref": "VPC"
                },
                "GroupDescription": "MongoDB server management and access ports",
                "SecurityGroupIngress": [
                    {
                        "IpProtocol": "tcp",
                        "FromPort": "22",
                        "ToPort": "22",
                        "SourceSecurityGroupId": {
                            "Ref": "EcsInstanceSecurityGroup"
                        }
                    },
                    {
                        "IpProtocol": "tcp",
                        "FromPort": "27017",
                        "ToPort": "27030",
                        "SourceSecurityGroupId": {
                            "Ref": "EcsInstanceSecurityGroup"
                        }
                    },
                    {
                        "IpProtocol": "tcp",
                        "FromPort": "28017",
                        "ToPort": "28017",
                        "SourceSecurityGroupId": {
                            "Ref": "EcsInstanceSecurityGroup"
                        }
                    }
                ]
            }
        },
        "MongoDBServersSecurityGroup": {
            "Type": "AWS::EC2::SecurityGroup",
            "Properties": {
                "VpcId": {
                    "Ref": "VPC"
                },
                "GroupDescription": "MongoDB inter-server communication and management ports",
                "SecurityGroupIngress": [
                    {
                        "IpProtocol": "tcp",
                        "FromPort": "22",
                        "ToPort": "22",
                        "SourceSecurityGroupId": {
                            "Ref": "MongoDBServerSecurityGroup"
                        }
                    },
                    {
                        "IpProtocol": "tcp",
                        "FromPort": "27017",
                        "ToPort": "27030",
                        "SourceSecurityGroupId": {
                            "Ref": "MongoDBServerSecurityGroup"
                        }
                    },
                    {
                        "IpProtocol": "tcp",
                        "FromPort": "28017",
                        "ToPort": "28017",
                        "SourceSecurityGroupId": {
                            "Ref": "MongoDBServerSecurityGroup"
                        }
                    }
                ]
            }
        },
        "MongoDBNodeIAMRole": {
            "Type": "AWS::IAM::Role",
            "Properties": {
                "AssumeRolePolicyDocument": {
                    "Statement": [
                        {
                            "Effect": "Allow",
                            "Principal": {
                                "Service": [
                                    "ec2.amazonaws.com"
                                ]
                            },
                            "Action": [
                                "sts:AssumeRole"
                            ]
                        }
                    ]
                },
                "Path": "/",
                "Policies": [
                    {
                        "PolicyName": "Backup",
                        "PolicyDocument": {
                            "Statement": [
                                {
                                    "Effect": "Allow",
                                    "Action": [
                                        "s3:*",
                                        "ec2:Describe*",
                                        "ec2:AttachNetworkInterface",
                                        "ec2:AttachVolume",
                                        "ec2:CreateTags",
                                        "ec2:CreateVolume",
                                        "ec2:RunInstances",
                                        "ec2:StartInstances",
                                        "ec2:DeleteVolume",
                                        "ec2:CreateSecurityGroup",
                                        "ec2:CreateSnapshot"
                                    ],
                                    "Resource": "*"
                                },
                                {
                                    "Effect": "Allow",
                                    "Action": [
                                        "dynamodb:*",
                                        "dynamodb:Scan",
                                        "dynamodb:Query",
                                        "dynamodb:GetItem",
                                        "dynamodb:BatchGetItem",
                                        "dynamodb:UpdateTable"
                                    ],
                                    "Resource": [
                                        "*"
                                    ]
                                }
                            ]
                        }
                    }
                ]
            }
        },
        "MongoDBNodeIAMProfile": {
            "Type": "AWS::IAM::InstanceProfile",
            "Properties": {
                "Path": "/",
                "Roles": [
                    {
                        "Ref": "MongoDBNodeIAMRole"
                    }
                ]
            }
        },


        "LoadBalancer": {
          "Type": "AWS::ElasticLoadBalancingV2::LoadBalancer",
          "Properties": {
            "Scheme": "internal",
            "Subnets": [{
              "Ref": "PublicSubnet1"
            }, {
              "Ref": "PublicSubnet2"
            }],
            "LoadBalancerAttributes": [{
              "Key": "access_logs.s3.enabled",
              "Value": "true"
            }, {
              "Key": "access_logs.s3.bucket",
              "Value": {"Ref":"S3Bucket"}
            }],
            "SecurityGroups": [{
              "Ref": "LoadBalancerSecurityGroup"
            }]
          }
        },
        "LoadBalancerListener": {
            "Type": "AWS::ElasticLoadBalancingV2::Listener", 
            "Properties": {
                "LoadBalancerArn": {
                    "Ref": "LoadBalancer"
                }, 
                "Port": 6800,
                "Protocol": "HTTP", 
                "DefaultActions": [
                    {
                        "Type": "forward", 
                        "TargetGroupArn": {
                            "Ref": "DefaultTargetGroup"
                        }
                    }
                ]
            }
        }, 

        "DefaultTargetGroup": {
            "Type": "AWS::ElasticLoadBalancingV2::TargetGroup", 
            "Properties": {
                "Name": { 
                    "Fn::Join": [ "-", [ { "Ref": "EcsCluster" }, "tg" ] ]
                },
                "VpcId": {
                    "Ref": "VPC"
                }, 
                "Protocol": "HTTP",
                "Port": 6800,
                "TargetGroupAttributes": [{
                    "Key": "deregistration_delay.timeout_seconds",
                    "Value": "30"
                }],
                "Targets": []
            }
        },


        "LoadBalancerSecurityGroup": {
          "Type": "AWS::EC2::SecurityGroup",
          "Properties": {
            "GroupDescription": "LoadBalancer Security Group",
            "VpcId": {
              "Ref": "VPC"
            },
            "SecurityGroupIngress": [{
                "IpProtocol": "tcp",
                "FromPort": 6800,
                "ToPort": 6800,
                "SourceSecurityGroupId": {
                  "Ref": "EcsInstanceSecurityGroup"
                }
            }]
          }
        },
        "VPC0" : {
            "Type" : "AWS::EC2::VPC",
            "Properties" : {
                "EnableDnsSupport" : "true",
                "EnableDnsHostnames" : "true",
                "CidrBlock" :  { "Fn::FindInMap" : [ "VPCLayout", "VPC", "CIDR" ]},
                "Tags" : [
                    {
                        "Key" : "VPC",
                        "Value" : "ECS"
                    },
                    {
                        "Key" : "Name",
                        "Value" : "ECS refarch service discovery"
                    }
                ]
            }
        },
        "VPCStack": {
            "Type": "AWS::CloudFormation::Stack",
            "Properties": {
                "TemplateURL": "https://${QSS3BucketName}.s3.amazonaws.com/${QSS3KeyPrefix}submodules/quickstart-aws-vpc/templates/aws-vpc.template",
                "Parameters": {
                    "AvailabilityZones": {
                        "Fn::Join": [
                            ",",
                            {
                                "Ref": "AvailabilityZones"
                            }
                        ]
                    },
                    "KeyPairName": {
                        "Ref": "KeyPairName"
                    },
                    "NumberOfAZs": {
                        "Ref": "NumberOfAZs"
                    },
                    "PrivateSubnet1ACIDR": {
                        "Ref": "PrivateSubnet1CIDR"
                    },
                    "PrivateSubnet2ACIDR": {
                        "Ref": "PrivateSubnet2CIDR"
                    },
                    "PrivateSubnet3ACIDR": {
                        "Ref": "PrivateSubnet3CIDR"
                    },
                    "PublicSubnet1CIDR": {
                        "Ref": "PublicSubnet1CIDR"
                    },
                    "PublicSubnet2CIDR": {
                        "Ref": "PublicSubnet2CIDR"
                    },
                    "PublicSubnet3CIDR": {
                        "Ref": "PublicSubnet3CIDR"
                    },
                    "VPCCIDR": {
                        "Ref": "VPCCIDR"
                    }
                }
            }
        },
        "HostedZone": {
            "Type": "AWS::Route53::HostedZone",
            "Properties": {
                "HostedZoneConfig": { "Comment": "Hosted Zone for ECS Service Discovery" },
                "Name": { "Fn::Join": [ ".", [ { "Ref": "EcsCluster" }, "internal" ] ] },
                "VPCs": [{
                    "VPCId": {
                        "Fn::GetAtt": [
                            "VPCStack",
                            "Outputs.VPCID"
                        ]
                    },
                    "VPCRegion": {"Ref": "AWS::Region"}
                }]
            }
        },
        "InternetGateway" : {
            "Type" : "AWS::EC2::InternetGateway",
            "DependsOn" : "VPC"
        },
        "AttachGateway" : {
            "Type" : "AWS::EC2::VPCGatewayAttachment",
            "DependsOn" : [
                "VPC",
                "InternetGateway"
            ],
            "Properties" : {
                "VpcId" : {
                    "Ref" : "VPC"
                },
                "InternetGatewayId" : {
                    "Ref" : "InternetGateway"
                }
            }
        },
        "PublicSubnet1" : {
            "Type" : "AWS::EC2::Subnet",
            "DependsOn" : "AttachGateway",
            "Properties" : {
                "VpcId" : { "Ref" : "VPC" },
                "CidrBlock" : { "Fn::FindInMap" : [ "VPCLayout", "PublicSubnet1Config", "CIDR" ]},
                "MapPublicIpOnLaunch": "true",
                "AvailabilityZone" : {
                    "Fn::Select" : [
                        "0",
                        {
                            "Fn::GetAZs" : {"Ref": "AWS::Region"}
                        }
                    ]
                },
                "Tags" : [
                    {
                        "Key" : "Name",
                        "Value" : "Public Subnet 1"
                    }
                ]
            }
        },
        "PublicSubnet2" : {
            "Type" : "AWS::EC2::Subnet",
            "DependsOn" : "AttachGateway",
            "Properties" : {
                "VpcId" : { "Ref" : "VPC" },
                "CidrBlock" : { "Fn::FindInMap" : [ "VPCLayout", "PublicSubnet2Config", "CIDR" ]},
                "MapPublicIpOnLaunch": "true",
                "AvailabilityZone" : {
                    "Fn::Select" : [
                        "1",
                        {
                            "Fn::GetAZs" : {"Ref": "AWS::Region"}
                        }
                    ]
                },
                "Tags" : [
                    {
                        "Key" : "Name",
                        "Value" : "Public Subnet 2"
                    }
                ]
            }
        },
        "PublicRouteTable" : {
            "Type" : "AWS::EC2::RouteTable",
            "DependsOn" : [
                "VPC",
                "AttachGateway"
            ],
            "Properties" : {
                "VpcId" : {
                    "Ref" : "VPC"
                },
                "Tags" : [
                    {
                        "Key" : "Name",
                        "Value" : "Public"
                    }
                ]
            }
        },
        "PublicRoute" : {
            "Type" : "AWS::EC2::Route",
            "DependsOn" : [
                "PublicRouteTable",
                "AttachGateway"
            ],
            "Properties" : {
                "RouteTableId" : {
                    "Ref" : "PublicRouteTable"
                },
                "DestinationCidrBlock" : "0.0.0.0/0",
                "GatewayId" : {
                    "Ref" : "InternetGateway"
                }
            }
        },
        "PublicSubnet1RouteTableAssociation" : {
            "Type" : "AWS::EC2::SubnetRouteTableAssociation",
            "DependsOn" : [
                "PublicRouteTable",
                "PublicSubnet1",
                "AttachGateway"
            ],
            "Properties" : {
                "SubnetId" : {
                    "Ref" : "PublicSubnet1"
                },
                "RouteTableId" : {
                    "Ref" : "PublicRouteTable"
                }
            }
        },
        "PublicSubnet2RouteTableAssociation" : {
            "Type" : "AWS::EC2::SubnetRouteTableAssociation",
            "DependsOn" : [
                "PublicRouteTable",
                "PublicSubnet2"
            ],
            "Properties" : {
                "SubnetId" : {
                    "Ref" : "PublicSubnet2"
                },
                "RouteTableId" : {
                    "Ref" : "PublicRouteTable"
                }
            }
        },
        "EcsInstanceSecurityGroup" : {
            "Type" : "AWS::EC2::SecurityGroup",
            "DependsOn" : "AttachGateway",
            "Properties" : {
                "GroupDescription" : "Security Group for EcsInstance",
                "VpcId" : {
                    "Ref" : "VPC"
                },
                "Tags" : [
                    {
                        "Key" : "Name",
                        "Value" : "EcsInstanceSecurityGroup"
                    }
                ]
            }
        },

        "EcsInstanceSecurityGroupLoadBalancer" : {
            "Type" : "AWS::EC2::SecurityGroupIngress",
            "Properties" : {
                "GroupId" : { "Ref" : "EcsInstanceSecurityGroup" },
                "IpProtocol" : "tcp",
                "FromPort" : 0,
                "ToPort" : 65535,
                "SourceSecurityGroupId" : { "Ref" : "LoadBalancerSecurityGroup" }
            }
        },

        "EcsInstanceSecurityGroupApps" : {
            "Type" : "AWS::EC2::SecurityGroupIngress",
            "Properties" : {
                "GroupId" : { "Ref" : "EcsInstanceSecurityGroup" },
                "IpProtocol" : "tcp",
                "FromPort" : 0,
                "ToPort" : 65535,
                "SourceSecurityGroupId" : { "Ref" : "EcsInstanceSecurityGroup" }
            }
        },
        "EcsInstanceSecurityGroupAppsSSH" : {
            "Type" : "AWS::EC2::SecurityGroupIngress",
            "Properties" : {
                "GroupId" : { "Ref" : "EcsInstanceSecurityGroup" },
                "IpProtocol" : "tcp",
                "FromPort" : 22,
                "ToPort" : 22,
                "CidrIp" : "0.0.0.0/0"
            }
        },
        "EcsInstanceSecurityGroupAppsWeb" : {
            "Type" : "AWS::EC2::SecurityGroupIngress",
            "Properties" : {
                "GroupId" : { "Ref" : "EcsInstanceSecurityGroup" },
                "IpProtocol" : "tcp",
                "FromPort" : 80,
                "ToPort" : 80,
                "CidrIp" : "0.0.0.0/0"
            }
        },
        "MountTargetSecurityGroup": {
          "Type": "AWS::EC2::SecurityGroup",
          "Properties": {
            "VpcId": { "Ref": "VPC" },
            "GroupDescription": "Security group for mount target",
            "SecurityGroupIngress": [
              {
                "IpProtocol": "tcp",
                "FromPort": "2049",
                "ToPort": "2049",
                "CidrIp": "0.0.0.0/0"
              }
            ]
          }
        },
        "FileSystem": {
          "Type": "AWS::EFS::FileSystem",
          "Properties": {
            "PerformanceMode": "generalPurpose",
            "FileSystemTags": [
              {
                "Key": "Name",
                "Value": { "Ref" : "VolumeName" }
              }
            ]
          }
        },
        "MountTarget1": {
          "Type": "AWS::EFS::MountTarget",
          "Properties": {
            "FileSystemId": { "Ref": "FileSystem" },
            "SubnetId": { "Ref": "PublicSubnet1" },
            "SecurityGroups": [ { "Ref": "MountTargetSecurityGroup" } ]
          }
        },
        "MountTarget2": {
          "Type": "AWS::EFS::MountTarget",
          "Properties": {
            "FileSystemId": { "Ref": "FileSystem" },
            "SubnetId": { "Ref": "PublicSubnet2" },
            "SecurityGroups": [ { "Ref": "MountTargetSecurityGroup" } ]
          }
        },
        "LaunchConfig": {
            "Type": "AWS::AutoScaling::LaunchConfiguration",
            "Metadata" : {
                "AWS::CloudFormation::Init" : {
                    "configSets" : {
                        "default" : [ "setup", "mount", "ecssd" ]
                    },
                    "setup" : {
                        "packages" : {
                          "yum" : {
                            "nfs-utils" : []
                          }
                        },
                        "files" : {
                          "/home/ec2-user/post_nfsstat" : {
                            "content" : { "Fn::Join" : [ "", [
                                  "#!/bin/bash\n",
                                  "\n",
                                  "INPUT=\"$(cat)\"\n",
                                  "CW_JSON_OPEN='{ \"Namespace\": \"EFS\", \"MetricData\": [ '\n",
                                  "CW_JSON_CLOSE=' ] }'\n",
                                  "CW_JSON_METRIC=''\n",
                                  "METRIC_COUNTER=0\n",
                                  "\n",
                                  "for COL in 1 2 3 4 5 6; do\n",
                                  "\n",
                                  " COUNTER=0\n",
                                  " METRIC_FIELD=$COL\n",
                                  " DATA_FIELD=$(($COL+($COL-1)))\n",
                                  "\n",
                                  " while read line; do\n",
                                  "   if [[ COUNTER -gt 0 ]]; then\n",
                                  "\n",
                                  "     LINE=`echo $line | tr -s ' ' `\n",
                                  "     AWS_COMMAND=\"aws cloudwatch put-metric-data --region ", { "Ref": "AWS::Region" }, "\"\n",
                                  "     MOD=$(( $COUNTER % 2))\n",
                                  "\n",
                                  "     if [ $MOD -eq 1 ]; then\n",
                                  "       METRIC_NAME=`echo $LINE | cut -d ' ' -f $METRIC_FIELD`\n",
                                  "     else\n",
                                  "       METRIC_VALUE=`echo $LINE | cut -d ' ' -f $DATA_FIELD`\n",
                                  "     fi\n",
                                  "\n",
                                  "     if [[ -n \"$METRIC_NAME\" && -n \"$METRIC_VALUE\" ]]; then\n",
                                  "       INSTANCE_ID=$(curl -s http://169.254.169.254/latest/meta-data/instance-id)\n",
                                  "       CW_JSON_METRIC=\"$CW_JSON_METRIC { \\\"MetricName\\\": \\\"$METRIC_NAME\\\", \\\"Dimensions\\\": [{\\\"Name\\\": \\\"InstanceId\\\", \\\"Value\\\": \\\"$INSTANCE_ID\\\"} ], \\\"Value\\\": $METRIC_VALUE },\"\n",
                                  "       unset METRIC_NAME\n",
                                  "       unset METRIC_VALUE\n",
                                  "\n",
                                  "       METRIC_COUNTER=$((METRIC_COUNTER+1))\n",
                                  "       if [ $METRIC_COUNTER -eq 20 ]; then\n",
                                  "         # 20 is max metric collection size, so we have to submit here\n",
                                  "         aws cloudwatch put-metric-data --region ", { "Ref": "AWS::Region" }, " --cli-input-json \"`echo $CW_JSON_OPEN ${CW_JSON_METRIC%?} $CW_JSON_CLOSE`\"\n",
                                  "\n",
                                  "         # reset\n",
                                  "         METRIC_COUNTER=0\n",
                                  "         CW_JSON_METRIC=''\n",
                                  "       fi\n",
                                  "     fi  \n",
                                  "\n",
                                  "\n",
                                  "\n",
                                  "     COUNTER=$((COUNTER+1))\n",
                                  "   fi\n",
                                  "\n",
                                  "   if [[ \"$line\" == \"Client nfs v4:\" ]]; then\n",
                                  "     # the next line is the good stuff \n",
                                  "     COUNTER=$((COUNTER+1))\n",
                                  "   fi\n",
                                  " done <<< \"$INPUT\"\n",
                                  "done\n",
                                  "\n",
                                  "# submit whatever is left\n",
                                  "aws cloudwatch put-metric-data --region ", { "Ref": "AWS::Region" }, " --cli-input-json \"`echo $CW_JSON_OPEN ${CW_JSON_METRIC%?} $CW_JSON_CLOSE`\""
                                ] ] },
                            "mode": "000755",
                            "owner": "ec2-user",
                            "group": "ec2-user"
                          },
                          "/home/ec2-user/crontab" : {
                            "content" : { "Fn::Join" : [ "", [
                              "* * * * * /usr/sbin/nfsstat | /home/ec2-user/post_nfsstat\n"
                            ] ] },
                            "owner": "ec2-user",
                            "group": "ec2-user"
                          },
                          "/home/ec2-user/.bash_aliases" : {
                             "content" : { "Fn::Join" : [ "", [
                               "function docke {\n",
                               "  docker exec -ti $(docker ps -qla -f \"label=com.amazonaws.ecs.container-name=$1\") sh\n",
                               "}\n",
                               "function dockl {\n",
                               "  tail=''\n",
                               "  if [ $1 == '-f' ]; then\n",
                               "    shift\n",
                               "    tail=' -f'\n",
                               "  fi\n",
                               "  docker logs$tail $(docker ps -qla -f \"label=com.amazonaws.ecs.container-name=$1\") 2>&1 \n",
                               "}\n",
                               "function dockr {\n",
                               "  docker stop $(docker ps -qla -f \"label=com.amazonaws.ecs.container-name=$1\") | xargs docker rm -f\n",
                               "}\n"
                             ]]},
                            "owner": "ec2-user",
                            "group": "ec2-user"
                          }
                        },
                        "commands" : {
                          "01_createdir" : {
                            "command" : {"Fn::Join" : [ "", [ "mkdir /", { "Ref" : "MountPoint" }]]}
                          }
                        }
                    },
                    "mount" : {
                        "commands" : {
                          "01_mount" : {
                            "command" : { "Fn::Sub": "sudo mount -t nfs4 -o nfsvers=4.1,rsize=1048576,wsize=1048576,hard,timeo=600,retrans=2 ${FileSystem}.efs.${AWS::Region}.amazonaws.com:/ /${MountPoint}"}
                          },
                          "02_permissions" : {
                            "command" : {"Fn::Join" : [ "", [ "chown ec2-user:ec2-user /", { "Ref" : "MountPoint" }]]}
                          }
                        }
                    },
                    "ecssd" : {
                        "files" : {
                            "/etc/init/ecssd_agent.conf" : {
                                "content" : { "Fn::Join" : [ "", [
                                  "description \"Amazon EC2 Container Service Discovery\"\n",
                                  "start on stopped rc RUNLEVEL=[345]\n",
                                  "stop on shutdown\n",
                                  "\n",
                                  "exec /usr/local/bin/ecssd_agent ", {"Ref": "EcsCluster"}, ".internal >> /var/log/ecssd_agent.log 2>&1\n",
                                  "respawn\n"
                                ]]},
                                "mode"    : "000644",
                                "owner"   : "root",
                                "group"   : "root"
                            },
                            "/usr/local/bin/ecssd_agent": {
                                "source"  : "https://github.com/dickmao/service-discovery-ecs-dns/releases/download/1.5.1/ecssd_agent",
                                "mode"    : "000755",
                                "owner"   : "root",
                                "group"   : "root"
                            }
                        }
                    }
                }
            },
            "Properties": {
                "KeyName": { "Ref": "KeyName" },
                "ImageId": { "Ref": "EcsAmiId" },
                "SecurityGroups": [ { "Ref": "EcsInstanceSecurityGroup" } ],
                "InstanceType": { "Ref": "EcsInstanceType" },
                "AssociatePublicIpAddress" : "true",
                "IamInstanceProfile": { "Fn::GetAtt" : ["InstanceProfile", "Arn"] },
                "UserData"       : { "Fn::Base64" : { "Fn::Join" : ["", [
                    "#!/bin/bash -xe\n",
                    "echo ECS_CLUSTER=", {"Ref": "EcsCluster"}, " >> /etc/ecs/ecs.config\n",
                    "# scrapoxy delete security group needs at least 60s\n",
                    "echo ECS_CONTAINER_STOP_TIMEOUT=100s", " >> /etc/ecs/ecs.config\n",
                    "yum install -y aws-cfn-bootstrap\n",
                    "yum update -y aws-cfn-bootstrap\n",
                    "yum install -y bind-utils.x86_64\n",
                    "yum install -y rsync\n",
                    "/opt/aws/bin/cfn-init -v ",
                    "         --stack ", { "Ref" : "AWS::StackName" },
                    "         --resource LaunchConfig ",
                    "         --configsets default ",
                    "         --region ", { "Ref" : "AWS::Region" }, "\n",
                    "crontab /home/ec2-user/crontab\n",
                    "/opt/aws/bin/cfn-signal -e $? ",
                    "         --stack ", { "Ref" : "AWS::StackName" },
                    "         --resource ServerGroup ",
                    "         --region ", { "Ref" : "AWS::Region" }, "\n",
                    "mkdir -p /", {"Ref": "MountPoint"}, "/", { "Ref" : "ScrapydHostpath"}, "\n",
                    "chown ec2-user:ec2-user /", { "Ref" : "MountPoint" }, "/$(basename $(echo ", { "Ref" : "ScrapydHostpath"}, " | rev) | rev)" , "\n",
                    "mkdir -p /", {"Ref": "MountPoint"}, "/", { "Ref" : "RedisHostpath"}, "\n",
                    "chown ec2-user:ec2-user /", { "Ref" : "MountPoint" }, "/$(basename $(echo ", { "Ref" : "RedisHostpath"}, " | rev) | rev)" , "\n",
                    "echo source .bash_aliases >> /home/ec2-user/.bashrc\n",
                    "start ecssd_agent\n"
                ]]}}
            }
        },
        "ServerGroup": {
            "Type": "AWS::AutoScaling::AutoScalingGroup",
            "CreationPolicy" : {
              "ResourceSignal" : {
                "Timeout" : "PT15M",
                "Count"   : { "Ref": "AsgMaxSize" }
              }
            },
            "DependsOn": ["MountTarget1", "MountTarget2", "AttachGateway"],
            "Properties": {
                "AvailabilityZones" : [
                    { "Fn::GetAtt" : [ "PublicSubnet1", "AvailabilityZone" ] },
                    { "Fn::GetAtt" : [ "PublicSubnet2", "AvailabilityZone" ] }
                ],

                "VPCZoneIdentifier" : [
                    { "Ref" : "PublicSubnet1" },
                    { "Ref" : "PublicSubnet2" }
                ],

                "LaunchConfigurationName": { "Ref": "LaunchConfig" },
                "TargetGroupARNs": [
                    { "Ref": "DefaultTargetGroup" }
                ],
                "MinSize": {"Ref": "AsgMaxSize"},
                "MaxSize": {"Ref": "AsgMaxSize"},
                "DesiredCapacity": {"Ref": "AsgMaxSize"},
                "Tags" : [
                    { "Key" : "Application", "Value" : { "Ref" : "AWS::StackName" }, "PropagateAtLaunch" : "true" },
                    { "Key" : "Name", "Value" : "Kiosk", "PropagateAtLaunch" : "true" }
                ]
            }
        },
        "InstanceRole": {
            "Type": "AWS::IAM::Role",
            "Properties": {
                "AssumeRolePolicyDocument": {
                    "Version" : "2012-10-17",
                    "Statement": [ {
                        "Effect": "Allow",
                        "Principal": {
                            "Service": [ "ec2.amazonaws.com" ]
                        },
                        "Action": [ "sts:AssumeRole" ]
                    } ]
                },
                "ManagedPolicyArns": [
                    "arn:aws:iam::aws:policy/service-role/AmazonEC2ContainerServiceforEC2Role",
                    "arn:aws:iam::aws:policy/AmazonRoute53FullAccess",
                    "arn:aws:iam::aws:policy/AmazonEC2ContainerRegistryPowerUser"
                ],
                "Path": "/"
            }
        },
        "ECSRole": {
            "Type": "AWS::IAM::Role",
            "Properties": {
                "AssumeRolePolicyDocument": {
                    "Version" : "2012-10-17",
                    "Statement": [ {
                        "Effect": "Allow",
                        "Principal": {
                            "Service": [ "ecs.amazonaws.com" ]
                        },
                        "Action": [ "sts:AssumeRole" ]
                    } ]
                },
                "ManagedPolicyArns": [
                    "arn:aws:iam::aws:policy/service-role/AmazonEC2ContainerServiceRole"
                ],
                "Path": "/"
            }
        },
        "InstanceProfile": {
            "Type": "AWS::IAM::InstanceProfile",
            "Properties": {
                "Path": "/",
                "Roles": [ {
                    "Ref": "InstanceRole"
                } ]
            }
        },
        "LambdaServiceRole": {
          "Type": "AWS::IAM::Role",
          "DependsOn": "HostedZone",
          "Properties": {
            "AssumeRolePolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [{
                "Effect": "Allow",
                "Principal": {
                  "Service": [
                    "lambda.amazonaws.com"
                  ]
                },
                "Action": [
                  "sts:AssumeRole"
                ]
              }]
            },
            "Path": "/",
            "Policies": [{
              "PolicyName": "CloudWatchEventsLambdaRoute53",
              "PolicyDocument": {
                "Version": "2012-10-17",
                "Statement": [{
                  "Effect": "Allow",
                  "Action": [
                    "logs:CreateLogGroup",
                    "logs:CreateLogStream",
                    "logs:PutLogEvents"
                  ],
                  "Resource": "arn:aws:logs:*:*:*"
                }, {
                  "Effect": "Allow",
                  "Action": [
                    "route53:ChangeResourceRecordSets"
                  ],
                  "Resource": {
                    "Fn::Join": ["", ["arn:aws:route53:::hostedzone/", {
                      "Ref": "HostedZone"
                    }]]
                  }
                }, {
                  "Effect": "Allow",
                  "Action": [
                    "elasticloadbalancing:Describe*"
                  ],
                  "Resource": "*"
                }]
              }
            }]
          }
        },
        "RegisterEcsServiceDns": {
          "Type": "AWS::Lambda::Function",
          "Properties": {
            "Handler": "index.lambda_handler",
            "Role": { "Fn::GetAtt" : ["LambdaServiceRole", "Arn"] },
            "Code": {
              "ZipFile" : { "Fn::Join" : ["\n", [
                "from __future__ import print_function",
                "import json",
                "import boto3",
                "import os",
                "",
                "def lambda_handler(event, context):",
                "",  
                "    # spit out event data",
                "    print(\"Received event: \" + json.dumps(event, indent=2))    ",
                "",
                "    zoneid = os.environ.get(\"ZONEID\")",
                "    if not zoneid:",
                "        print(\"ZONEID not set. No action taken.\")",
                "        return",
                "",
                "    cluster = os.environ.get(\"CLUSTER\")",
                "    if not cluster:",
                "        print(\"CLUSTER not set. No action taken.\")",
                "        return",
                "",
                "    # private hosted zone domain name and id",
                "    privatezone = cluster + \".internal\"",
                "",
                "    # check we are working against the appropriate ecs cluster",
                "    if cluster != event['detail']['requestParameters']['cluster']:",
                "        print(\"This event does not apply to us. No action taken.\")",
                "        return",
                "",
                "    if not event['detail']['responseElements']['service']['loadBalancers']:",
                "        print(\"This event has no loadbalancers. No action taken.\")",
                "        return",
                "",
                "    # grab DNS name for load balancer",
                "    elbclient = boto3.client('elbv2')",
                "    lbinfo = event['detail']['responseElements']['service']['loadBalancers'][0]",
                "    describetg = elbclient.describe_target_groups(TargetGroupArns=[lbinfo['targetGroupArn']])",
                "    lbarn = describetg['TargetGroups'][0]['LoadBalancerArns'][0]",
                "    describelb = elbclient.describe_load_balancers(",
                "        LoadBalancerArns=[",
                "            lbarn",
                "        ]",
                "    )",
                "    lbcanonical = describelb['LoadBalancers'][0]['DNSName']",
                "    service = event['detail']['responseElements']['service']['serviceName'].split(\"-\")[0]",
                "    servicerecord = service + \".\" + privatezone + \".\"",
                "",
                "    # grab type of event",
                "    eventname = event['detail']['eventName']",
                "",
                "    # boto connect to route53",
                "    route53client = boto3.client('route53')",
                "",
                "    # create/update record",
                "    if eventname == 'CreateService':",
                "        response = route53client.change_resource_record_sets(",
                "            HostedZoneId=zoneid,",
                "            ChangeBatch={",
                "                'Comment' : 'ECS service registered',",
                "                'Changes' : [",
                "                    {",
                "                        'Action' : 'UPSERT',",
                "                        'ResourceRecordSet' : {",
                "                            'Name' : servicerecord,",
                "                            'Type' : 'CNAME',",
                "                            'TTL' : 60,",
                "                            'ResourceRecords' : [",
                "                                {",
                "                                    'Value' : lbcanonical",
                "                                }",
                "                            ]",
                "                        }",
                "                    }",
                "                ] ",
                "            }",
                "        )",
                "",
                "        print(response)",
                "",
                "    # delete record",
                "    elif eventname == 'DeleteService':",
                "        response = route53client.change_resource_record_sets(",
                "            HostedZoneId=zoneid,",
                "            ChangeBatch={",
                "                'Comment' : 'ECS service deregistered',",
                "                'Changes' : [",
                "                    {",
                "                        'Action' : 'DELETE',",
                "                        'ResourceRecordSet' : {",
                "                            'Name' : servicerecord,",
                "                            'Type' : 'CNAME',",
                "                            'TTL' : 60,",
                "                            'ResourceRecords' : [",
                "                                {",
                "                                    'Value' : lbcanonical",
                "                                }",
                "                            ]",
                "                        }",
                "                    }",
                "                ] ",
                "            }",
                "        )",
                "        print(response)",
                "",
                "    else:",
                "        print(\"This event does not apply to us. No action taken.\")"
                
               ]]}
            },
            "Environment": {
              "Variables": {
                "ZONEID": { "Ref": "HostedZone" },
                "CLUSTER": { "Ref": "EcsCluster" }
              }
            },
            "Runtime": "python2.7",
            "Timeout": "25"
          }
        },
        "RegisterEcsServiceDnsRule": {
          "Type": "AWS::Events::Rule",
          "Properties": {
            "Description": "RegisterEcsServiceDnsRule",
            "EventPattern": {
              "detail-type": [
                "AWS API Call via CloudTrail"
              ],
              "detail": {
                "eventSource": [
                  "ecs.amazonaws.com"
                ],
                "eventName": [
                  "CreateService",
                  "DeleteService"
                ]
              }
            },
            "State": "ENABLED",
            "Targets": [{
              "Arn": { "Fn::GetAtt": ["RegisterEcsServiceDns", "Arn"] },
              "Id": "TargetFunctionV1"
            }]
          }
        },
        "LambdaInvokePermission": {
          "Type": "AWS::Lambda::Permission",
          "Properties": {
            "FunctionName": {
              "Fn::GetAtt": [
                "RegisterEcsServiceDns",
                "Arn"
              ]
            },
            "Action": "lambda:InvokeFunction",
            "Principal": "events.amazonaws.com",
            "SourceArn": {
              "Fn::GetAtt": [
                "RegisterEcsServiceDnsRule",
                "Arn"
              ]
            }
          }
        },
        "S3Bucket": {
          "DeletionPolicy" : "Delete",
          "Type": "AWS::S3::Bucket",
          "Properties": {
          }
        },


        "BucketPolicy" : {
          "Type" : "AWS::S3::BucketPolicy",
          "Properties" : {
            "Bucket" : {"Ref" : "S3Bucket"},
            "PolicyDocument" : {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Sid": "AWSCloudTrailAclCheck",
                  "Effect": "Allow",
                  "Principal": { "Service":"cloudtrail.amazonaws.com"},
                  "Action": "s3:GetBucketAcl",
                  "Resource": { "Fn::Join" : ["", ["arn:aws:s3:::", {"Ref":"S3Bucket"}]]}
                },
                {
                  "Sid": "AWSCloudTrailWrite",
                  "Effect": "Allow",
                  "Principal": { "Service":"cloudtrail.amazonaws.com"},
                  "Action": "s3:PutObject",
                  "Resource": { "Fn::Join" : ["", ["arn:aws:s3:::", {"Ref":"S3Bucket"}, "/AWSLogs/", {"Ref":"AWS::AccountId"}, "/*"]]},
                  "Condition": {
                    "StringEquals": {
                      "s3:x-amz-acl": "bucket-owner-full-control"
                    }
                  }
                },
                {
                  "Sid": "AWSElasticLoadBalancerWrite",
                  "Effect": "Allow",
                  "Principal": { 
                    "AWS": {
                       "Fn::FindInMap": [
                         "RegionalConfigs", { Ref: "AWS::Region" }, "ELBAccountId"
                       ]
                    }
                  },
                  "Action": "s3:PutObject",
                  "Resource": { "Fn::Join" : ["", ["arn:aws:s3:::", {"Ref":"S3Bucket"}, "/AWSLogs/", {"Ref":"AWS::AccountId"}, "/*"]]},
                }
              ]
            }
          }
        },
        "CloudTrail" : {
          "DependsOn" : ["BucketPolicy"],
          "Type" : "AWS::CloudTrail::Trail",
          "Properties" : {
            "S3BucketName" : {"Ref":"S3Bucket"},
            "IsLogging" : true
          }
        }
    }
}
